{"name":"Crystal.js","tagline":"A lightweight Javascript live/inline form validator. ","body":"crystal.js\r\n---\r\n##### Version 0.1.3\r\n##### See it in action at http://functioncreate.com\r\n\r\n# A lightweight Javascript inline/live form validator\r\n+ 4KB minified \r\n+ No Jquery.\r\n\r\n# For Easy, Pre-Set Usage\r\nThe file crystal-common.js implements crystal.js and provides validation for the the following:\r\n    + Name (checks if name is not empty and without digits)\r\n    + Email (checks if email adheres to the RFC2822 standard)\r\n    + Message (check if empty)\r\n\r\n1. Include crystal.js, crystal-common.js, and form-serialize.\r\n\r\n    ```html       \r\n    <script type='text/javascript', src='http://form-serialize.googlecode.com/svn/trunk/serialize-0.2.min.js'</script>\r\n    <script type='text/javascript', src='/path/to/crystal.min.js'></script>\r\n    <script type='text/javascript', src='/path/to/crystal-common.min.js'></script>\r\n    ```\r\n\r\n2. You will need to add the id `crystal-someName` to your name input element like so:\r\n\r\n    ```html\r\n    <input type=\"text\" id=\"crystal-someName\" name=\"someName\"></input>\r\n    ```\r\n\r\nFor an email field, set the input element's id to `crystal-email`. For a message field, set the input element's id to `crystal-message`. \r\n\r\n3. Add the CSS \r\n```css\r\n.crystal-invalid {\r\n  border: 2px solid #f15b22 !important;\r\n}\r\n```\r\n\r\n# For Developers\r\n### Flexible and Extendable\r\ncrystal.js is easily modifiable and easily extendable. It is built in a modular pattern, and provides a `module.export` for script loaders implementing the node.js module pattern, or a named AMD module. crystal.js is easily extendible without using a script loader as well. To define your own crystal object and fields, use the `Crystal` constructor and the `addField` method. Below is an example:\r\n\r\n```javascript\r\nvar crystal = new Crystal({\r\n    formID: \"contact-us\",\r\n    ajaxSubmit: true,\r\n});\r\ncrystal.addField({\r\n    fieldID: \"crystal-someName\",\r\n    commonName: \"name\",\r\n    regex: /[A-Za-z -']$/\r\n})\r\n```\r\n\r\nThe full list of options is found below.\r\n\r\n### Configuration Options\r\n**`Crystal` Constructor Options**\r\n\r\nOption | Type | Default | Description\r\n------ | ---- | ------- | -----------\r\nformID | string | \"crystal-form\" | The form id without the '#'\r\najaxSubmit | boolean | false | Whether the form be submitted via ajax or not\r\n\r\n**`addField` options**\r\n\r\nOption | Type | Default | Description\r\n------ | ---- | ------- | -----------\r\nfieldID | string | \"\" | The input element's id without the '#'\r\ncommonName | string | fieldID | If a human readable name should be specified, set it here\r\nregex | Regex literal | null | Regex literal pattern. Should match valid input.\r\ntrigger | string | \"oninput\" | The DOM event to trigger the `isValid` method.Accepts \"oninput\" or \"onblur\"\r\n\r\n### Further Extension ###\r\nIf you are looking to extend crystal.js even further, you can do so via object prototypes. More on this coming soon.\r\n\r\n# Contributing\r\nThe goal of crystal.js is to be a lightweight boilerplate for simple inline form validation. Thus, when contributing keep this in mind. Fork, and send a pull request. All contributors will be added to a list of contributors.\r\n\r\n# License\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}